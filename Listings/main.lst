C51 COMPILER V9.60.0.0   MAIN                                                              04/06/2021 20:02:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Mani\Keil\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\ma
                    -in.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <at89c5131.h>
   2          #include "lcd.h"    //Header file with LCD interfacing functions
   3          // global vars
   4          unsigned char tile_num; // 0 to 8
   5          //unsigned char tile_width[] = {1,2, 2, 1,2, 2, 2, 1,2};
   6          //                            *|**|* |*|**|**| *| |  
   7          //                             |  |**|*|* | *|**|*|**
   8          //tile_nums:                  0| 1| 2|3| 4| 5| 6|7| 8
   9          unsigned char curr_pos; // 0 to 15
  10          char r1[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; // top row    | 1 => filled
  11          char r2[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; // bottom row | 0 => empty
  12          unsigned char lfsr = 0x01; // 0000(b3)(b2)(b1)(b0)
  13          
  14          void uart_init(void)
  15          {
  16   1        TMOD=0x20;      //Configure Timer 1 in Mode 2
  17   1        TH1=204;          //Load TH1 to obtain require Baudrate (Refer Serial.pdf for calculations)
  18   1        SCON=0x50;      //Configure UART peripheral for 8-bit data transfer 
  19   1        TR1 = 1;                //Start Timer 1
  20   1        IEN0 = 0x90;                  //Enable Serial Interrupt
  21   1                          //Enable Global Interrupt
  22   1      }
  23          //
  24          char get_new_tile(void){
  25   1        char b_three = lfsr & 0x08; // 0000(b3)000
  26   1        char b_zero = ((lfsr << 3) & 0x08); // 0000(b0)000
  27   1        lfsr = (lfsr >> 1) ^ (b_three ^ b_zero); // update lfsr
  28   1        lfsr = (lfsr & 0x0F); // update lfsr
  29   1        return (lfsr % 3);
  30   1      }
  31          //
  32          bit fun_can_move(void){
  33   1        bit res = 1;
  34   1        if(curr_pos == 0){
  35   2          return 0;
  36   2        }
  37   1        /*
  38   1        if (tile_num==0 || tile_num==1){
  39   1          if(r1[curr_pos-1]){res = 0;}
  40   1        }else if (tile_num==2 || tile_num==3 || tile_num==4 || tile_num==5 || tile_num==6){
  41   1          if(r1[curr_pos-1] || r2[curr_pos-1]){res = 0;}
  42   1        }else{
  43   1          if(r2[curr_pos-1]){res = 0;}
  44   1        }
  45   1        */
  46   1        switch(tile_num){
  47   2          case 0:{
  48   3            if(r1[curr_pos-1]){res = 0;}
  49   3            break;
  50   3          }
  51   2          case 1:{
  52   3            if(r1[curr_pos-1]){res = 0;}
  53   3            break;
  54   3          }
C51 COMPILER V9.60.0.0   MAIN                                                              04/06/2021 20:02:58 PAGE 2   

  55   2          case 2:{
  56   3            if(r1[curr_pos-1] || r2[curr_pos-1]){res = 0;}
  57   3            break;
  58   3          }
  59   2          case 3:{
  60   3            if(r1[curr_pos-1] || r2[curr_pos-1]){res = 0;}
  61   3            break;
  62   3          }
  63   2          case 4:{
  64   3            if(r1[curr_pos-1] || r2[curr_pos-1]){res = 0;}
  65   3            break;
  66   3          }
  67   2          case 5:{
  68   3            if(r1[curr_pos-1] || r2[curr_pos]){res = 0;}
  69   3            break;
  70   3          }
  71   2          case 6:{
  72   3            if(r1[curr_pos] || r2[curr_pos-1]){res = 0;}
  73   3            break;
  74   3          }
  75   2          case 7:{
  76   3            if(r2[curr_pos-1]){res = 0;}
  77   3            break;
  78   3          }
  79   2          case 8:{
  80   3            if(r2[curr_pos-1]){res = 0;}
  81   3            break;
  82   3          }
  83   2        }
  84   1        return res;
  85   1      }
  86          //
  87          void move_left(void){
  88   1        switch(tile_num){
  89   2          case 0:{
  90   3            lcd_cmd(128 + curr_pos - 1); lcd_write_char('*'); lcd_write_char(' ');
  91   3            break;
  92   3          }
  93   2          case 1:{
  94   3            lcd_cmd(128 + curr_pos - 1); lcd_write_char('*');
  95   3            lcd_cmd(128 + curr_pos + 1); lcd_write_char(' ');
  96   3            break;
  97   3          }
  98   2          case 2:{
  99   3            lcd_cmd(128 + curr_pos - 1); lcd_write_char('*'); lcd_write_char(' ');
 100   3            lcd_cmd(192 + curr_pos - 1); lcd_write_char('*');
 101   3            lcd_cmd(192 + curr_pos + 1); lcd_write_char(' ');
 102   3            break;
 103   3          }
 104   2          case 3:{
 105   3            lcd_cmd(128 + curr_pos - 1); lcd_write_char('*'); lcd_write_char(' ');
 106   3            lcd_cmd(192 + curr_pos - 1); lcd_write_char('*'); lcd_write_char(' ');
 107   3            break;
 108   3          }
 109   2          case 4:{
 110   3            lcd_cmd(128 + curr_pos - 1); lcd_write_char('*');
 111   3            lcd_cmd(128 + curr_pos + 1); lcd_write_char(' ');
 112   3            lcd_cmd(192 + curr_pos - 1); lcd_write_char('*'); lcd_write_char(' ');
 113   3            break;
 114   3          }
 115   2          case 5:{
 116   3            lcd_cmd(128 + curr_pos - 1); lcd_write_char('*');
C51 COMPILER V9.60.0.0   MAIN                                                              04/06/2021 20:02:58 PAGE 3   

 117   3            lcd_cmd(128 + curr_pos + 1); lcd_write_char(' ');
 118   3            lcd_cmd(192 + curr_pos); lcd_write_char('*'); lcd_write_char(' ');
 119   3            break;
 120   3          }
 121   2          case 6:{
 122   3            lcd_cmd(128 + curr_pos); lcd_write_char('*'); lcd_write_char(' ');
 123   3            lcd_cmd(192 + curr_pos - 1); lcd_write_char('*');
 124   3            lcd_cmd(192 + curr_pos + 1); lcd_write_char(' ');
 125   3            break;
 126   3          }
 127   2          case 7:{
 128   3            lcd_cmd(192 + curr_pos - 1); lcd_write_char('*'); lcd_write_char(' ');
 129   3            break;
 130   3          }
 131   2          case 8:{
 132   3            lcd_cmd(192 + curr_pos - 1); lcd_write_char('*');
 133   3            lcd_cmd(192 + curr_pos + 1); lcd_write_char(' ');
 134   3            break;
 135   3          }
 136   2        }
 137   1      }
 138          //
 139          void update_r(void){
 140   1        /*
 141   1        if (tile_num != 7 && tile_num != 8){
 142   1          r1[curr_pos] = 1;
 143   1        }
 144   1        if (tile_num != 0 && tile_num != 1){
 145   1          r2[curr_pos] = 1;
 146   1        }
 147   1        if (tile_num==1 || tile_num==4 || tile_num==5 || tile_num==6){
 148   1          r1[curr_pos + 1] = 1;
 149   1        }
 150   1        if (tile_num==1 || tile_num==4 || tile_num==5 || tile_num==6){
 151   1          r2[curr_pos + 1] = 1;
 152   1        }
 153   1        */
 154   1        switch(tile_num){
 155   2          case 0:{
 156   3            r1[curr_pos] = 1;
 157   3            break;
 158   3          }
 159   2          case 1:{
 160   3            r1[curr_pos] = 1;
 161   3            r1[curr_pos+1] = 1;
 162   3            break;
 163   3          }
 164   2          case 2:{
 165   3            r1[curr_pos] = 1;
 166   3            r2[curr_pos] = 1;
 167   3            r2[curr_pos+1] = 1;
 168   3            break;
 169   3          }
 170   2          case 3:{
 171   3            r1[curr_pos] = 1;
 172   3            r2[curr_pos] = 1;
 173   3            break;
 174   3          }
 175   2          case 4:{
 176   3            r1[curr_pos] = 1;
 177   3            r2[curr_pos] = 1;
 178   3            r1[curr_pos + 1] = 1;
C51 COMPILER V9.60.0.0   MAIN                                                              04/06/2021 20:02:58 PAGE 4   

 179   3            break;
 180   3          }
 181   2          case 5:{
 182   3            r1[curr_pos] = 1;
 183   3            r2[curr_pos] = 1;
 184   3            r1[curr_pos + 1] = 1;
 185   3            r2[curr_pos + 1] = 1;
 186   3            break;
 187   3          }
 188   2          case 6:{
 189   3            r1[curr_pos] = 1;
 190   3            r2[curr_pos] = 1;
 191   3            r1[curr_pos + 1] = 1;
 192   3            r2[curr_pos + 1] = 1;
 193   3            break;
 194   3          }
 195   2          case 7:{
 196   3            r2[curr_pos] = 1;
 197   3            break;
 198   3          }
 199   2          case 8:{
 200   3            r2[curr_pos] = 1;
 201   3            r2[curr_pos + 1] = 1;
 202   3            break;
 203   3          }
 204   2        }
 205   1      }
 206          //
 207          void move_up(){
 208   1        if ((tile_num == 7) && (!r1[curr_pos])){
 209   2          lcd_cmd(128 + curr_pos); lcd_write_char('*');
 210   2          lcd_cmd(192 + curr_pos); lcd_write_char(' ');
 211   2          tile_num = 0;
 212   2        }else if (((tile_num == 8) && (!r1[curr_pos])) && (!r1[curr_pos + 1])){
 213   2          lcd_cmd(128 + curr_pos); lcd_write_char('*'); lcd_write_char('*');
 214   2          lcd_cmd(192 + curr_pos); lcd_write_char(' '); lcd_write_char(' ');
 215   2          tile_num = 1;
 216   2        }else{}
 217   1      }
 218          //
 219          void move_down(){
 220   1        if ((tile_num == 0) && (!r2[curr_pos])){
 221   2          lcd_cmd(128 + curr_pos); lcd_write_char(' ');
 222   2          lcd_cmd(192 + curr_pos); lcd_write_char('*');
 223   2          tile_num = 7;
 224   2        }else if (((tile_num == 1) && (!r2[curr_pos])) && (!r2[curr_pos + 1])){
 225   2          lcd_cmd(128 + curr_pos); lcd_write_char(' '); lcd_write_char(' ');
 226   2          lcd_cmd(192 + curr_pos); lcd_write_char('*'); lcd_write_char('*');
 227   2          tile_num = 8;
 228   2        }else{}
 229   1      }
 230          //
 231          void rotate(){
 232   1        switch (tile_num){
 233   2          case 0:{break;}
 234   2          case 1:{
 235   3            if (!r2[curr_pos + 1]){
 236   4              // can rotate
 237   4              lcd_cmd(128 + curr_pos); lcd_write_char(' ');
 238   4              lcd_cmd(192 + curr_pos + 1); lcd_write_char('*');
 239   4              tile_num = 3; curr_pos++;
 240   4            }
C51 COMPILER V9.60.0.0   MAIN                                                              04/06/2021 20:02:58 PAGE 5   

 241   3            break;
 242   3          }
 243   2          case 2:{
 244   3            lcd_cmd(128 + curr_pos + 1); lcd_write_char('*');
 245   3            lcd_cmd(192 + curr_pos + 1); lcd_write_char(' ');
 246   3            tile_num = 4;
 247   3            break;
 248   3          }
 249   2          case 3:{
 250   3            if (!r1[curr_pos-1]){
 251   4              lcd_cmd(128 + curr_pos - 1); lcd_write_char('*');
 252   4              lcd_cmd(192 + curr_pos); lcd_write_char(' ');
 253   4              tile_num = 1; curr_pos--;
 254   4            }
 255   3            break;
 256   3          }
 257   2          case 4:{
 258   3            lcd_cmd(192 + curr_pos); lcd_write_char(' '); lcd_write_char('*');
 259   3            tile_num = 5;
 260   3            break;
 261   3          }
 262   2          case 5:{
 263   3            if(!r2[curr_pos]){
 264   4              lcd_cmd(128 + curr_pos); lcd_write_char(' ');
 265   4              lcd_cmd(192 + curr_pos); lcd_write_char('*');
 266   4              tile_num = 6;
 267   4            }
 268   3            break;
 269   3          }
 270   2          case 6:{
 271   3            if(!r1[curr_pos]){
 272   4              lcd_cmd(128 + curr_pos); lcd_write_char('*'); lcd_write_char(' ');
 273   4              tile_num = 2;
 274   4            }
 275   3            break;
 276   3          }
 277   2          case 7:{break;}
 278   2          case 8:{
 279   3            if(!r1[curr_pos + 1]){
 280   4              lcd_cmd(128 + curr_pos + 1); lcd_write_char('*');
 281   4              lcd_cmd(192 + curr_pos); lcd_write_char(' ');
 282   4              tile_num = 3; curr_pos++;
 283   4            }
 284   3            break;
 285   3          }
 286   2        }
 287   1      }
 288          //  
 289          void serial_ISR(void) interrupt 4
 290          { // can see unsigned char tile_num , r1, r2 , curr_pos
 291   1        unsigned char ch1 = 0;
 292   1        ch1 = SBUF;
 293   1        switch(ch1){
 294   2          case 'q': {move_up(); break;}
 295   2          case 'a': {move_down(); break;}
 296   2          case 'r': {rotate(); break;}
 297   2          default: {}
 298   2        }
 299   1        RI = 0;     //Clear RI flag
 300   1      }
 301          //
 302          //Main function
C51 COMPILER V9.60.0.0   MAIN                                                              04/06/2021 20:02:58 PAGE 6   

 303          void main(void)
 304          {
 305   1        unsigned int high_score = 0;
 306   1        char score_str[5]={0,0,0,0,'\0'};
 307   1        unsigned int score = 0;
 308   1        char high_score_str[5]={0,0,0,0,'\0'};
 309   1        bit can_move = 1;
 310   1        int i; // iterator
 311   1        
 312   1        //Call initialization functions
 313   1        lcd_init();
 314   1        uart_init();
 315   1        
 316   1        while(1){ // play game indefinitely, to loop over games
 317   2          score = 0;
 318   2          for (i=0; i<16; i++){
 319   3            r1[i] = 0;
 320   3            r2[i] = 0;
 321   3          }
 322   2          while((!r1[15]) || (!r2[15])){ // while place to move in this game, to loop over tiles
 323   3            tile_num = get_new_tile();
 324   3            curr_pos = 16;
 325   3      
 326   3            if (tile_num==0 && r1[15]){
 327   4              break;
 328   4            }else if (tile_num==1 && (r1[15] || r1[14])){
 329   4              break;
 330   4            }else if (tile_num==2 && (r1[14] || r1[15] || r2[14] || r2[15])){
 331   4              break;
 332   4            }
 333   3            if(tile_num == 0){
 334   4              curr_pos--;
 335   4              lcd_cmd(0x8F); lcd_write_char('*');
 336   4            }else if (tile_num == 1){
 337   4              curr_pos -= 2;
 338   4              lcd_cmd(0x8E); lcd_write_char('*'); lcd_write_char('*');
 339   4            }else{
 340   4              curr_pos -= 2;
 341   4              lcd_cmd(0x8E); lcd_write_char('*');
 342   4              lcd_cmd(0xCE); lcd_write_char('*'); lcd_write_char('*');
 343   4            }
 344   3            score++; msdelay(1000);
 345   3            can_move = fun_can_move();
 346   3            while(can_move){
 347   4              // move_left(); curr_pos--; score++; one_sec_delay();
 348   4              EA  = 0;
 349   4              move_left();
 350   4              EA = 1;
 351   4              curr_pos--; score++;
 352   4              msdelay(1000); // 1 sec delay
 353   4              can_move = fun_can_move(); // update can_move
 354   4            }
 355   3            // tile has reached destination, update r1, r2
 356   3            update_r();
 357   3          } // game has ended
 358   2          if(score > high_score){
 359   3            high_score = score;
 360   3            int_to_string(high_score, high_score_str);
 361   3          }
 362   2          lcd_cmd(0x01);
 363   2          int_to_string(score, score_str);
 364   2          lcd_cmd(0x80);
C51 COMPILER V9.60.0.0   MAIN                                                              04/06/2021 20:02:58 PAGE 7   

 365   2          lcd_write_string("Score: ");
 366   2          lcd_write_string(score_str);
 367   2          lcd_cmd(0xC0);
 368   2          lcd_write_string("High Score: ");
 369   2          lcd_write_string(high_score_str);
 370   2          msdelay(3000);
 371   2          lcd_cmd(0x01);
 372   2        }
 373   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1769    ----
   CONSTANT SIZE    =     31    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     35      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
